// 最顶层的语法规则
gnc = {
    SOI
    ~ external_declaration*
    ~EOI
}

external_declaration = {
    function
}

// 定义一个函数的语法规则
// 例:
//  int main() {
//      return 0;
//  }
function = {
    data_type ~ identifier ~ function_parameter_list ~ "{"
        ~ statement*
    ~ "}"
}


// 标识符
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }


// 类型
data_type = { "int" }

// 函数参数表
function_parameter_list = {
    "(" ~ (none_function_parameter) ~ ")"
}

none_function_parameter = { WHITESPACE | "" }

statement = {
    return_statement ~ ";" |
    data_type ~ ( declaration ~  ",")*  ~ declaration ~ ";" |
    assignment ~ ";"
}

assignment = {
	identifier ~ "=" ~ expression ~ ( "," ~ identifier ~ "=" ~ expression )*
}

declaration = {
    identifier ~ ( "=" ~ expression ) ?
}

return_statement = { "return" ~ expression }

bin_op = _{ add | subtract | multiply | divide | power }
    add      = { "+" }
    subtract = { "-" }
    multiply = { "*" }
    divide   = { "/" }
    power    = { "^" }

expression = { term ~ (bin_op ~ term)* }
term = _{ int_literal | identifier | "(" ~ expression ~ ")" | unary_expression }

unary_expression = {
    negative_unary |
    logical_not_unary |
    bitwise_complement_unary
}

negative_unary = { "-" ~ term }
logical_not_unary = { "!" ~ term }
bitwise_complement_unary = { "~" ~ term }

// 字面量
int_literal = { dec_literal | hex_literal | oct_literal }
dec_literal = @{ "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
hex_literal = @{ ^"0x" ~ ASCII_ALPHANUMERIC+ }
oct_literal = @{ "0" ~ ASCII_ALPHANUMERIC+ }

WHITESPACE = _{ " " | "\n" | "\r" }
COMMENT = _{
    ("/*" ~ (!"*/" ~ ANY)* ~ "*/") // Block comment
    | ("//" ~ (!"\n" ~ ANY)* ~ "\n") // Line comment
}