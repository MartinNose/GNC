// 最顶层的语法规则
gnc = {
    SOI
    ~ external_declaration*
    ~EOI
}

external_declaration = {
    function
}

// 定义一个函数的语法规则
// 例:
//  int main() {
//      return 0;
//  }
function = {
    data_type ~ identifier ~ function_parameter_list ~ "{"
        ~ statement*
    ~ "}"
}


// 标识符
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }


// 类型
data_type = { "int" }

// 函数参数表
function_parameter_list = {
    "(" ~ (none_function_parameter) ~ ")"
}

// function_parameter_list = {
//     open_brace
//         ~ (none_function_parameter | function_parameter ~ (comma ~ function_parameter)* )
//     ~ close_brace
// }

none_function_parameter = { WHITESPACE | "" }

statement = {
    return_statement ~ ";" |
    expression? ~ ";" |
    data_type ~ ( declaration ~  ",")*  ~ declaration ~ ";"
}

declaration = {
    identifier ~ ( "=" ~ expression ) ?
}

return_statement = { "return" ~ expression }

// 表达式
expression = {
    additive_expression
}

additive_expression = {
    multiple_expression |
    multiple_expression ~ "+" ~ add_expression |
    multiple_expression ~ "-" ~ minus_expression
}

add_expression = {
    additive_expression
}

minus_expression = {
    additive_expression
}

multiple_expression = {
    unary_expression |
    unary_expression ~ "*" ~ mul_expression |
    unary_expression ~ "/" ~ div_expression |
    unary_expression ~ "%" ~ div_full_expression
}

mul_expression = {
    multiple_expression
}

div_expression = {
    multiple_expression
}

div_full_expression = {
    multiple_expression
}

// 一元操作运算符
unary_expression = {
    primary |
    negative_unary |
    logical_not_unary |
    bitwise_complement_unary
}

negative_unary = { "-" ~ unary_expression }
logical_not_unary = { "!" ~ unary_expression }
bitwise_complement_unary = { "~" ~ unary_expression }

primary = {
    int_literal |
    "(" ~ expression ~ ")" |
    identifier
}

// 字面量
int_literal = { dec_literal | hex_literal | oct_literal }
dec_literal = @{ "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
hex_literal = @{ ^"0x" ~ ASCII_ALPHANUMERIC+ }
oct_literal = @{ "0" ~ ASCII_ALPHANUMERIC+ }

WHITESPACE = _{ " " | "\n" | "\r" }
COMMENT = _{
    ("/*" ~ (!"*/" ~ ANY)* ~ "*/") // Block comment
    | ("//" ~ (!"\n" ~ ANY)* ~ "\n") // Line comment
}
