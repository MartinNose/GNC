{"version":3,"sources":["components/AntVG6.js","components/Card.js","components/DropMenu.js","App.js","utils/AST2VisData.js","reportWebVitals.js","entrypoint.js"],"names":["AntVTree","props","ref","useRef","useState","graph","setGraph","useEffect","current","getBoundingClientRect","width","height","data","render","fitView","tooltip","G6","Tooltip","offsetX","offsetY","getContent","e","outDiv","document","createElement","style","content","item","getModel","label","attrs","attr","innerHTML","itemTypes","tmp_graph","TreeGraph","container","ReactDOM","findDOMNode","linkCenter","modes","default","type","onChange","collapsed","defaultNode","size","anchorPoints","defaultEdge","layout","direction","getId","d","id","getHeight","getWidth","getVGap","getHGap","plugins","node","position","rotate","children","Math","PI","fill","stroke","labelCfg","offset","textAlign","display","flex","CardContainer","styled","div","className","CardItem","Card","left","right","classNames","classes","filter","Boolean","join","DropMenu","options","defaultOption","selected","setSelected","value","open","Button","name","aria-hidden","show","as","Fragment","leave","leaveFrom","leaveTo","Options","static","map","option","Option","active","button","Header","header","Footer","footer","CardLabelText","span","Title","Input","input","ExampleOptions","VisOptions","App","code","editCode","mockASTData","parseTree","setParseTree","AST","setAST","visMode","setVisMode","href","src","alt","defaultLanguage","theme","onClick","console","log","JSON","parse","compile_result","error","alert","ast","toString","remark","node2tree","astNode","nodeList","treeNode","x","assignOperation","leftValue","assignChildren","globalType","globalName","globalAssignment","binaryOperator","lhs","rhs","unaryOperator","unaryExpression","retType","funcName","parameters","funcChildren","functionName","returnType","stringify","funcCallName","funcArguments","Arguments","initClause","condition","iteration","forStatement","InitClause","isDoWhile","whileCondition","whileStatements","push","AST2VisualizationData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode","getElementById"],"mappings":"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","file":"static/js/3.c88ae492.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport G6 from '@antv/g6';\n\nexport default function AntVTree(props) {\n    const style = {\n        display: 'flex',\n        flex: '1 1 auto'\n    }\n    const ref = useRef(null);\n    const [graph, setGraph] = useState(null);\n\n    useEffect(() => {\n        const {width, height} = ref.current.getBoundingClientRect()\n        if (!graph) {\n            const tooltip = new G6.Tooltip({\n                offsetX: 10,\n                offsetY: 20,\n                getContent(e) {\n                    const outDiv = document.createElement('div');\n                    outDiv.style.width = '180px';\n                    let content = `<h4><b>${e.item.getModel().label}</b></h4>`\n\n                    if (e.item.getModel().attrs) {\n                        const attrs = e.item.getModel().attrs\n                        content += `<ul>`\n                        for (const attr in attrs) {\n                            content += `<li><b> - ${attr}:</b> ${attrs[attr]}</li>`\n                        }\n                        content += `</ul>`\n                    }\n                    outDiv.innerHTML = content\n                    return outDiv\n                },\n                itemTypes: ['node']\n            });\n            // eslint-disable-next-line\n            let tmp_graph = new G6.TreeGraph({\n                container: ReactDOM.findDOMNode(ref.current),\n                width: width,\n                height: height,\n                linkCenter: true,\n                modes: {\n                    default: [\n                        {\n                            type: 'collapse-expand',\n                            onChange: function onChange(item, collapsed) {\n                                const data = item.getModel();\n                                data.collapsed = collapsed;\n                                return true;\n                            },\n                        },\n                        'drag-canvas',\n                        'zoom-canvas',\n                    ],\n                },\n                defaultNode: {\n                    size: 26,\n                    anchorPoints: [\n                        [0, 0.5],\n                        [1, 0.5],\n                    ],\n                },\n                defaultEdge: {\n                    type: 'cubic-vertical',\n                },\n                layout: {\n                    type: 'compactBox',\n                    direction: 'TB',\n                    getId: function getId(d) {\n                        return d.id;\n                    },\n                    getHeight: function getHeight() {\n                        return 16;\n                    },\n                    getWidth: function getWidth() {\n                        return 16;\n                    },\n                    getVGap: function getVGap() {\n                        return 80;\n                    },\n                    getHGap: function getHGap() {\n                        return 50;\n                    },\n                },\n                plugins: [tooltip],\n            });\n            tmp_graph.node(function (node) {\n                let position = 'right';\n                let rotate = 0;\n                if (!node.children) {\n                    position = 'bottom';\n                    rotate = Math.PI / 2;\n                }\n                return {\n                    style: {\n                        fill: '#ECFDF5',\n                        stroke: '#34D399',\n                    },\n                    label: node.label,\n                    labelCfg: {\n                        position,\n                        offset: 5,\n                        style: {\n                            rotate,\n                            textAlign: 'start',\n                        },\n                    },\n                };\n            });\n            tmp_graph.data(props.data);\n            tmp_graph.render();\n            tmp_graph.fitView();\n            setGraph(tmp_graph)\n        } else {\n            graph.data(props.data);\n            graph.render();\n            graph.fitView();\n        }\n    }, [graph, props.data]);\n\n    return <div style={style} ref={ref}/>;\n}","import styled from \"styled-components\";\n\nconst CardContainer = styled.div.attrs({\n    className: \"flex flex-auto container w-full lg:w-1/3 p-2\"\n})`\n    height: 80vh;\n`;\n\nconst CardItem = styled.div.attrs({\n    className: \"flex flex-auto w-full h-full bg-white rounded-xl shadow-md overflow-hidden\"\n})``;\n\nexport default function Card(props) {\n    return (\n        <CardContainer>\n            <CardItem>\n                <div className={'flex flex-auto flex-col h-full'}>\n                    <div className={'flex flex-grow-0 flex-row p-2 bg-green-600'}>\n                        {props.left}\n                        <div className={'flex flex-grow'}/>\n                        {props.right}\n                    </div>\n                    <div className={'flex flex-auto flex-row p-2'}>\n                        {props.content}\n                    </div>\n                </div>\n            </CardItem>\n        </CardContainer>\n    )\n}","import {Fragment, useState} from 'react'\nimport {Listbox, Transition} from '@headlessui/react'\nimport {CheckIcon, SelectorIcon} from '@heroicons/react/solid'\n\nfunction classNames(...classes) {\n    return classes.filter(Boolean).join(' ')\n}\n\nexport default function DropMenu(props) {\n    const options = props.options\n    const [selected, setSelected] = useState(props.defaultOption)\n\n    const handleChange = (value) => {\n        setSelected(value)\n        const { onChange } = props\n        onChange?.(value)\n    }\n\n    return (\n        <Listbox value={selected} onChange={handleChange}>\n            {({open}) => (\n                <div className=\"relative\">\n                    <Listbox.Button\n                        className=\"relative w-40 h-full bg-white border border-gray-300 rounded-lg shadow-sm pl-2 pr-12 py-2 text-left cursor-default focus:outline-none focus:ring-1 focus:ring-green-500 focus:border-green-500 sm:text-sm\"\n                    >\n                            <span className=\"flex items-center\">\n                                <span className=\"ml-3 block truncate\">{selected.name}</span>\n                            </span>\n                        <span\n                            className=\"ml-3 absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n                                <SelectorIcon className=\"h-5 w-5 text-gray-400\" aria-hidden=\"true\"/>\n                            </span>\n                    </Listbox.Button>\n                    <Transition\n                        show={open}\n                        as={Fragment}\n                        leave=\"transition ease-in duration-100\"\n                        leaveFrom=\"opacity-100\"\n                        leaveTo=\"opacity-0\"\n                    >\n                        <Listbox.Options\n                            static\n                            className=\"absolute z-10 mt-1 w-full bg-white shadow-lg max-h-56 rounded-lg py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm\"\n                        >\n                            {options.map((option) => (\n                                <Listbox.Option\n                                    key={option.id}\n                                    className={({active}) =>\n                                        classNames(\n                                            active ? 'text-white bg-green-600' : 'text-gray-900',\n                                            'cursor-default select-none relative py-2 pl-3 pr-9'\n                                        )\n                                    }\n                                    value={option}\n                                >\n                                    {({selected, active}) => (\n                                        <>\n                                            <div className=\"flex items-center\">\n                                                <span className={classNames(selected ? 'font-semibold' : 'font-normal', 'ml-3 block truncate')}>{option.name}</span>\n                                            </div>\n                                            {selected ? (\n                                                <span className={classNames(active ? 'text-white' : 'text-green-600',\n                                                        'absolute inset-y-0 right-0 flex items-center pr-4'\n                                                    )}\n                                                >\n                                                    <CheckIcon className=\"h-5 w-5\" aria-hidden=\"true\"/>\n                                                </span>\n                                            ) : null}\n                                        </>\n                                    )}\n                                </Listbox.Option>\n                            ))}\n                        </Listbox.Options>\n                    </Transition>\n                </div>\n            )}\n        </Listbox>\n    )\n}\n","import './App.css';\nimport {useState} from \"react\";\nimport styled from 'styled-components'\nimport Editor from \"@monaco-editor/react\";\nimport AntVTree from \"./components/AntVG6\";\nimport mockASTData from './mock/mockedData.json';\nimport Card from \"./components/Card\";\nimport DropMenu from \"./components/DropMenu\"\nimport {compile_result} from \"gnc\"\nimport AST2VisualizationData from \"./utils/AST2VisData\"\n\nconst Button = styled.button.attrs({\n    className: \"flex flex-grow-0 py-2 px-4 ml-2 font-semibold rounded-lg shadow-md text-white bg-green-500 hover:bg-green-700\"\n})``;\n\nconst Header = styled.header.attrs({\n    className: \"flex flex-auto\"\n})`\n    height: 17vh;\n`;\n\nconst Footer = styled.footer.attrs({\n    className: \"flex flex-auto \"\n})`\n    height: 3vh;\n    min-height: 35px;\n`;\n\nconst CardLabelText = styled.span.attrs({\n    className: \"flex text-white text-3xl object-center font-bold pl-2 pt-1\"\n})``;\n\nconst Title = styled.span.attrs({\n    className: \"bg-clip-text text-transparent bg-gradient-to-r from-green-400 to-blue-500\"\n})`\n    line-height: 15vh;\n`;\n\nconst Input = styled.input.attrs({\n    className: \"text-green-900 rounded-lg shadow-md border-2 border-green-500\"\n})``;\n\nconst InitialCode = `int main (int a) {\n    int b = 3;\n    if (a == 0) {\n        a += b;\n    }\n    return a;\n}`\n\nconst ExampleOptions = [\n    {\n        id: 1,\n        name: 'Basic',\n    },\n    {\n        id: 2,\n        name: 'Unary'\n    }\n]\n\nconst VisOptions = [\n    {\n        id: 1,\n        name: 'Parse Tree',\n    },\n    {\n        id: 2,\n        name: 'AST',\n    },\n]\n\nfunction App() {\n    const [code, editCode] = useState(InitialCode)\n    const [parseTree, setParseTree] = useState(mockASTData)\n    const [AST, setAST] = useState(mockASTData)\n    const [visMode, setVisMode] = useState(VisOptions[0])\n\n    const compile = () => {\n        console.log(visMode)\n        let data = JSON.parse(compile_result(code))\n        if (!data.error) {\n            setParseTree(data['parse_tree'])\n            setAST(AST2VisualizationData(data['ast']))\n        } else {\n            alert(data['error_message']) // TODO: Use Modal\n        }\n    }\n\n    return (\n        <div className={'bg-green-100'}>\n            <Header>\n                <div\n                    className=\"text-4xl sm:text-6xl md:text-7xl lg:text-8xl text-center object-center align-middle font-extrabold w-full h-full\">\n                    <Title>\n                        GNC Compiler Online\n                    </Title>\n                    <a href={'https://github.com/PAN-Ziyue/GNC'}>\n                        <img className={'mx-auto p-1'} src={'https://img.shields.io/github/stars/PAN-Ziyue/GNC'}\n                             alt={'GitHub Repo'}/>\n                    </a>\n                </div>\n            </Header>\n            <div className={\"flex flex-auto flex-col lg:flex-row\"}>\n                <Card\n                    left={<CardLabelText>Code</CardLabelText>}\n                    right={<DropMenu\n                        options={ExampleOptions}\n                        defaultOption={ExampleOptions[0]}\n                    />}\n                    content={\n                        <Editor\n                            defaultLanguage=\"c\"\n                            theme=\"light\"\n                            onChange={editCode}\n                            value={code}\n                        />\n                    }\n                />\n                <Card\n                    left={\n                        <div>\n                            <CardLabelText>Visualization</CardLabelText>\n                        </div>\n                    }\n                    right={\n                        <div className={'flex flex-row'}>\n                            <DropMenu\n                                options={VisOptions}\n                                defaultOption={visMode}\n                                onChange={setVisMode}\n                            />\n                            <Button onClick={compile}>Compile</Button>\n                        </div>\n                    }\n                    content={\n                        <AntVTree\n                            data={(visMode.id === 1) ? parseTree : AST}\n                        />\n                    }\n                />\n                <Card\n                    left={<CardLabelText>Running Result</CardLabelText>}\n                    right={<Button>Run</Button>}\n                    content={\n                        <div>\n                            function: `main()`\n                            <br/>\n                            a: <Input/>\n                            <br/>\n                            res: 23333\n                        </div>\n                    }\n                />\n            </div>\n            <Footer>\n                <p className=\"text-xs lg:text-lg text-green-700 text-opacity-50 text-center object-center w-full\">\n                    <a href={'https://github.com/PAN-Ziyue/GNC'} className=\"no-underline hover:underline\">GNC</a> (2021)\n                    is the course project of Compilation Principle by Ziyue, MartinNose and <a\n                    href={'https://www.ncj.wiki'} className=\"no-underline hover:underline\">NCJ</a>. GNC is a recursive\n                    acronym for \"GNC's Not C-language!\"\n                </p>\n            </Footer>\n        </div>\n    );\n};\n\nexport default App;\n","export default function AST2VisualizationData(ast) {\n    let id = 0\n    const node2tree = (astNode) => {\n        let nodeList = []\n        for (const node of astNode) {\n            id += 1\n            let treeNode = {\n                id: id.toString(),\n                label: \"\",\n                attrs: {},\n                children: []\n            }\n            if (node === \"BreakStatement\" || node === \"ContinueStatement\") { // special statements\n                treeNode.label = node\n            } else for (const x in node) { // Actually there's only one entry inside\n                treeNode.label = x\n                switch (x) {\n                    // basics\n                    case \"Assignment\":\n                        const [assignOperation, leftValue, assignChildren] = node[x]\n                        treeNode.attrs = {\n                            assignOperation,\n                            leftValue\n                        }\n                        treeNode.children = node2tree([assignChildren])\n                        break\n                    case \"Identifier\":\n                        treeNode.attrs = {\n                            name: node[x]\n                        }\n                        break\n\n                    // literals\n                    case \"IntLiteral\":\n                    case \"BoolLiteral\":\n                    case \"FloatLiteral\":\n                        treeNode.attrs = {\n                            value: node[x]\n                        }\n                        break\n\n                    // declarations\n                    case \"Declaration\":\n                        const [type, name] = node[x]\n                        treeNode.attrs = {\n                            type,\n                            name\n                        }\n                        break\n                    case \"GlobalDeclaration\":\n                        const [globalType, globalName, globalAssignment] = node[x]\n                        treeNode.attrs = {\n                            type: globalType,\n                            name: globalName\n                        }\n                        treeNode.children = node2tree([globalAssignment])\n                        break\n\n                    // Expressions\n                    case \"BinaryExpression\":\n                        const [binaryOperator, lhs, rhs] = node[x]\n                        treeNode.attrs = {\n                            binaryOperator\n                        }\n                        treeNode.children = node2tree([lhs, rhs])\n                        break\n                    case \"UnaryExpression\":\n                        const [unaryOperator, unaryExpression] = node[x]\n                        treeNode.attrs = {\n                            unaryOperator\n                        }\n                        treeNode.children = node2tree([unaryExpression])\n                        break\n\n                    // functions\n                    case \"Function\":\n                        const [retType, funcName, parameters, funcChildren] = node[x]\n                        id += 1\n                        treeNode.attrs = {\n                            functionName: funcName,\n                            returnType: retType,\n                            parameters: JSON.stringify(parameters, null, 2)\n                        }\n                        treeNode.children = node2tree(funcChildren)\n                        break\n                    case \"ReturnStatement\":\n                        treeNode.children = node2tree([node[x]])\n                        break\n                    case \"FunctionCall\":\n                        const [funcCallName, funcArguments] = node[x]\n                        treeNode.attrs = {\n                            functionName: funcCallName\n                        }\n                        treeNode.children = node2tree([{Arguments: funcArguments}])\n                        break\n\n                    // flow controls & statements\n                    case \"ForStatement\":\n                        const [initClause, condition, iteration, forStatement] = node[x]\n                        treeNode.children = node2tree([{InitClause: initClause}, condition, iteration, forStatement])\n                        break\n                    case \"WhileStatement\":\n                        const [isDoWhile, whileCondition, whileStatements] = node[x]\n                        treeNode.attrs = {isDoWhile}\n                        treeNode.children = node2tree([whileCondition, whileStatements])\n                        break\n                    case \"IfStatement\": // IfStatements is visualized as a list of BlockStatements\n                    case \"InitClause\": // InitClause is a special form of BlockStatement\n                    case \"Arguments\": // FuncCallArguments is a special form of BlockStatements\n                    case \"BlockStatement\":\n                        treeNode.children = node2tree(node[x])\n                        break\n                    case \"BreakStatement\":\n                    case \"ContinueStatement\":\n                        break\n\n                    // unhandled case\n                    default:\n                        console.log(x)\n                        console.log(node[x])\n                }\n            }\n            nodeList.push(treeNode)\n        }\n        return nodeList\n    }\n    let tree = {\n        id: id.toString(),\n        label: \"GNC\",\n        attrs: {\n            remark: \"AST Root Node\"\n        },\n        children: node2tree(ast)\n    }\n    return tree\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}